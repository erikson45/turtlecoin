swagger: "2.0"
info:
  description: API Docs for using the TurtleCoin wallet-api program
  version: 1.0.0
  title: WalletAPI
  contact:
    url: http://chat.turtlecoin.lol
  license:
    name: GNU GPLv3
    url: https://github.com/turtlecoin/turtlecoin/blob/master/LICENSE
    
tags:
  - name: wallet
    description: Opening and creating wallets
  - name: addresses
    description: Creating addresses, getting transactions for an address, etc
  - name: node
    description: Get node details, swap node
  - name: keys
    description: Get private keys or mnemonic seed
  - name: transactions
    description: Get a transaction details, send a transaction, etc
  - name: misc
    description: Miscellaneous operations, such as saving, getting status, etc
    
paths:
  /wallet/open:
    post:
      tags:
        - wallet
      summary: Opens an already existing wallet
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Wallet"
        
  /wallet/import/key:
    post:
      tags:
        - wallet
      summary: Imports a wallet with a private spend and view key
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          required:
          - privateSpendKey
          - privateViewKey
          allOf:
            - $ref: "#/definitions/WalletImport"
            - properties:
                privateViewKey:
                  description: "64 char hex private view key"
                  type: "string"
                  example: >-
                    493f522e1f46b5c07f753ed28dc2db9da5f571f28c2fa54f4c9a0a7941b09d0b
                  
                privateSpendKey:
                  description: "64 char hex private spend key"
                  type: "string"
                  example: >-
                    5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06
        
  /wallet/import/seed:
    post:
      tags:
        - wallet
      summary: Imports a wallet using a mnemonic seed
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          required:
          - mnemonicSeed
          allOf:
            - $ref: "#/definitions/WalletImport"
            - properties:
                mnemonicSeed:
                  description: "The 25 words mnemonic seed"
                  type: "string"
                  example: >-
                    cynical waveform sixteen husband zebra ritual vexed jaws
                    eccentric jewels toenail having nabbing wept nozzle grunt
                    tipsy flying pegs feel upright lower racetrack sapling sapling
        
  /wallet/import/view:
    post:
      tags:
        - wallet
      summary: Imports a view only wallet with a private view key and public address
      description: >-
        Note that view only wallets can only see incoming transactions, so
        balance may be inflated, and they cannot send transactions.
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          required:
          - privateViewKey
          - address
          allOf:
            - $ref: "#/definitions/WalletImport"
            - properties:
                privateViewKey:
                  description: "64 char hex private view key"
                  type: "string"
                  example: >-
                    493f522e1f46b5c07f753ed28dc2db9da5f571f28c2fa54f4c9a0a7941b09d0b
                  
                address:
                  description: "99 char public TRTL address"
                  type: "string"
                  example: >-
                    TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
        
  /wallet/create:
    post:
      tags:
        - wallet
      summary: Creates a new wallet
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Wallet"
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
        
  /wallet:
    delete:
      tags:
        - wallet
      summary: Closes and saves the current wallet, allowing a new one to be opened/imported
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /save:
    put:
      tags:
        - misc
      summary: Saves the wallet state
      responses:
        200:
          $ref: '#/responses/Success'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /reset:
    put:
      tags:
        - misc
      summary: Resets and saves the wallet, beginning scanning from height given, if any
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: object
          properties:
            scanHeight:
              description: The daemon port to sync the wallet with
              type: integer
              example: 300000
              default: 0
              format: int64
            
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /node:
    get:
      tags:
        - node
      summary: Gets the node address, port, fee, and fee address
      responses:
        200:
          description: The operation completed successfully.
          schema:
            allOf:
              - $ref: '#/definitions/Node'
              - properties:
                  nodeFee:
                    type: integer
                    description: The fee the node you are connected to on each transaction (in atomic units)
                    example: 1000
                  nodeAddress:
                    type: string
                    description: The address the node fee gets sent to, if non zero
                    example: >-
                      TRTLv2Fyavy8CXG8BPEbNeCHFZ1fuDCYCZ3vW5H5LXN4K2M2MHUpTENip9bbavpHvvPwb4NDkBWrNgURAd5DB38FHXWZyoBh4wW
                
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
    put:
      tags:
        - node
      summary: Sets the node address and port
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: '#/definitions/Node'
      responses:
        202:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /keys:
    get:
      tags:
        - keys
      summary: Gets the wallet containers shared private view key
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              privateViewKey:
                type: string
                description: The private view key
                example: >-
                  85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /keys/[address]:
    get:
      tags:
        - keys
      summary: Gets the public and private spend key for the given address
      description: Note that this method cannot be used with a view only wallet
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              privateSpendKey:
                type: string
                description: The private spend key
                example: >-
                  85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a
              publicSpendKey:
                type: string
                description: The public spend key
                example: >-
                  85baeb8ae23bf266c68a5845f1ff13af7ff221f46e4dfc1293eec9a3e211a90a
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /keys/mnemonic/[address]:
    get:
      tags:
        - keys
      summary: Gets the mnemonic seed for the given address, if possible
      description: Note that this method cannot be used with a view only wallet
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              mnemonicSeed:
                type: string
                description: The mnemonic seed
                example: >-
                  leech lifestyle newt tarnished vials weavers decay nerves buying taken sample after jailed cupcake token pavements welders gifts ferry keep humid abbey emails entrance leech
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /status:
    get:
      tags:
        - misc
      summary: Get the wallet sync status, peer count, and hashrate
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              walletBlockCount:
                type: integer
                format: uint64
                description: The amount of blocks the wallet has scanned
                example: 100000
              localDaemonBlockCount:
                type: integer
                format: uint64
                description: The amount of blocks the daemon the wallet is connected to has synced
                example: 800000
              networkBlockCount:
                type: integer
                format: uint64
                description: The amount of blocks the network has
                example: 900000
              peerCount:
                type: integer
                format: uint32
                description: The amount of peers (incoming + outgoing) peers the daemon has
                example: 20
              hashrate:
                type: integer
                format: uint64
                description: The hashrate the last local block the daemon knows about has
                example: 123456789
              isViewWallet:
                type: boolean
                description: Whether this wallet is a view only wallet. Certain operations are illegal on a view only wallet, such as transferring.
                example: false
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /addresses:
    get:
      tags:
        - addresses
      summary: Gets a list of all addresses in the wallet container
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              addresses:
                type: array
                items:
                  type: string
                example: ["TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"]
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
    delete:
      tags:
        - addresses
      summary: Deletes the given subwallet from the container
      description: Note that you cannot delete the 'primary' address, the first address created in the wallet.
      responses:
        200:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /addresses/primary:
    get:
      tags:
        - addresses
      summary: Gets the 'primary' address
      description: The primary address is the first wallet created, and the one used as the change address if not specified.
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              address:
                type: string
                description: The primary address
                example: "TRTLv2cT32cZbF6KvnU69LNxptYFBMCKs3yqLmCAVjPW4rNTExpB7RpGKGJEkD1E9MVmM8SUUJfUh42Ajo1Hgz5wUN6budvzaq"
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /addresses/create:
    post:
      tags:
        - addresses
      summary: Creates a new, random address in the wallet container
      responses:
        201:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /addresses/import:
    post:
      tags:
        - addresses
      summary: Imports a subwallet with the given private spend key
      description: >-
        It is HIGHLY recommended you provide a scan height with this operation - wallet syncing will have to
        begin again from the scan height given (defaults to zero) if the scan height is less than the height
        of the current wallet sync status.
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          required:
          - privateSpendKey
          properties:
            scanHeight:
              description: The daemon port to sync the wallet with
              type: integer
              example: 300000
              default: 0
              format: uint64
            privateSpendKey:
              description: "64 char hex private spend key"
              type: "string"
              example: >-
                5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06
            
      responses:
        201:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /addresses/import/view:
    post:
      tags:
        - addresses
      summary: Imports a view only subwallet with the given publicSpendKey
      description: >-
        It is HIGHLY recommended you provide a scan height with this operation - wallet syncing will have to
        begin again from the scan height given (defaults to zero) if the scan height is less than the height
        of the current wallet sync status.
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          required:
          - publicSpendKey
          properties:
            scanHeight:
              description: The daemon port to sync the wallet with
              type: integer
              example: 300000
              default: 0
              format: uint64
            privateSpendKey:
              description: "64 char hex public spend key"
              type: "string"
              example: >-
                5c703d9bde0b7cd5ff3e19ea826a44066534661a7322c85e854e73f06e49cd06
            
      responses:
        201:
          $ref: '#/responses/Success'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/AlreadyOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /transactions:
    get:
      tags:
        - transactions
      summary: Gets a list of all transactions in the wallet container
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /transactions/unconfirmed:
    get:
      tags:
        - transactions
      summary: Gets a list of all unconfirmed, outgoing transactions in the wallet container
      description: Note that this DOES NOT include incoming transactions in the pool. This only applies to transactions that have been sent by this wallet file, and have not been added to a block yet.
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /transactions/[start height]:
    get:
      tags:
        - transactions
      summary: Returns transactions for the wallet starting at start height for 1,000 blocks
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
  /transactions/[start height]/[end height]:
    get:
      tags:
        - transactions
      summary: Returns transactions for the wallet starting at start height until end height
      description: Note that start height must be < end height
      responses:
        200:
          description: The operation completed successfully.
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  $ref: '#/definitions/Transaction'
        401:
          $ref: '#/responses/UnauthorizedError'
        403:
          $ref: '#/responses/NotOpen'
        500:
          $ref: '#/responses/InternalError'
          
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "X-API-KEY"
    in: "header"
    description: >-
        Your rpc password, hashed with PBKDF2, with 10,000 iterations, and a 16
        byte salt of all zeros. Api key should be formatted as hex, and be 32
        characters long (16 bytes). Prevents brute forcing.
        
responses:
  UnauthorizedError:
    description: "API key is missing or invalid."
  AlreadyOpen:
    description: "A wallet is already open. Call DELETE on /wallet first, to close it."
  Success:
    description: "The operation completed successfully."
  BadRequest:
    description: "A parse error occured, or an error occured processing your request."
    schema:
      type: object
      properties:
        errorCode:
          type: integer
          description: >-
            A numeric code representing the error, for programmatic use.
            Error code mappings can be found here -
            https://github.com/turtlecoin/turtlecoin/blob/development/src/WalletBackend/WalletErrors.h
            We will endeavour to not change these mappings.
          example: 5
        errorMessage:
          type: string
          description: >-
            A human readable error message, for displaying to the user.
            It is suggested for programmers to not pattern match on these, and instead use the errorCode.
          example: The password given for this wallet is incorrect.
      
  NotOpen:
    description: "This operation requires a wallet to be open, and one has not been opened."
  InternalError:
    description: "An exception was thrown whilst processing the request. See the console for logs."
        
security:
  - api_key: []
  
definitions:
        
  Wallet:
    required:
    - filename
    - password
    allOf:
    - properties:
        filename:
          description: The filename to store/load the wallet from. Note that this is relative to where turtle-wallet-api was launched from - it is recommended you use an absolute path.
          type: string
          example: mywallet.wallet
        password:
          description: The password used to open the wallet
          type: string
          example: supersecretpassword
    - $ref: '#/definitions/Node'
          
  WalletImport:
    allOf:
      - $ref: '#/definitions/Wallet'
      - properties:
          scanHeight:
            description: The daemon port to sync the wallet with
            type: integer
            example: 300000
            default: 0
            format: uint64
            
  Node:
    type: object
    properties: 
      daemonHost:
        description: The daemon host to sync the wallet with
        type: string
        example: public.turtlenode.io
        default: 127.0.0.1
      daemonPort:
        description: The daemon port to sync the wallet with
        type: integer
        format: uint16
        default: 11898
        example: 11898
        
  Transaction:
    type: object
    properties:
      blockHeight:
        type: number
        format: uint64
        example: 800000
        description: The block this transaction is contained in.
      fee:
        type: number
        format: uint64
        example: 10
        description: The amount the sender paid in miner fees for this transaction. In atomic units.
      hash:
        type: string
        example: 8e2dc89659409ea9c34a2e28f7350cefba304159c04cc4926acd12035a8b2379
        description: The hash of this transaction
      isCoinbaseTransaction:
        type: boolean
        example: false
        description: Whether this transaction is a miner reward or a normal transaction.
      paymentID:
        type: string
        example: 7fe73bd90ef05dea0b5c15fc78696619c50dd5f2ba628f2fd16a2e3445b1922f
        description: An identifier supplied by the sender. May be "" (empty string)
      timestamp:
        type: number
        format: uint64
        example: 1543222082
        description: The unix timestamp of the block this transaction is contained in.
      unlockTime:
        type: number
        format: uint64
        example: 0
        description: When this transaction unlocks for spending. If >= 50000000, treated as a timestamp. Normally zero.
      transfers:
        type: object
        properties:
          address:
            type: string
            example: TRTLv3ErzkY2CiAj6DL8isYELmTec8Z9BK56oL1KMhjMRSMyfwYaogKg17hQKC23CHPBcHqrHHGzdRYUk3HGqkMwXbHg3Dy2rH
            description: The receiving address of this transfer, or the sending address if the amount is negative
          amount:
            type: number
            format: int64
            example: 1234
            description: The amount of this transfer, in atomic units
        
host: "127.0.0.1:8070"
